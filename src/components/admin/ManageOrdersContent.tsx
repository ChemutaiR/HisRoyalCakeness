"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { X, FileText, ArrowRight, AlertTriangle, Clock } from 'lucide-react';

interface Order {
  id: string;
  dueDate: string;
  cake: string;
  cream: string;
  topping: string;
  allergies: string;
  status: string;
  specialInstructions: string;
  images: string[];
}

interface ManageOrdersContentProps {
  orders: Order[];
  setOrders: React.Dispatch<React.SetStateAction<Order[]>>;
  moveDeliveredToHistory: () => void;
}

export default function ManageOrdersContent({ orders, setOrders, moveDeliveredToHistory }: ManageOrdersContentProps) {
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [showDialog, setShowDialog] = useState(false);
  const [showAddOrderDialog, setShowAddOrderDialog] = useState(false);
  const [urgentOrders, setUrgentOrders] = useState<Order[]>([]);
  const [showUrgentAlert, setShowUrgentAlert] = useState(false);
  const [newOrder, setNewOrder] = useState({
    dueDate: '',
    cake: '',
    cream: '',
    topping: '',
      allergies: 'None', 
      specialInstructions: '',
    status: 'Received'
  });

  // Auto-generate order ID
  const generateOrderId = () => {
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000);
    return `#${timestamp}${random}`;
  };

  const [autoGeneratedOrderId] = useState(generateOrderId());

  // Date tracking functions
  const getDaysUntilDue = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffTime = due.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const isUrgent = useCallback((dueDate: string) => {
    const daysUntilDue = getDaysUntilDue(dueDate);
    return daysUntilDue <= 1 && daysUntilDue >= 0; // Due today or tomorrow
  }, []);

  const isOverdue = useCallback((dueDate: string) => {
    const daysUntilDue = getDaysUntilDue(dueDate);
    return daysUntilDue < 0;
  }, []);

  const getDateStatus = (dueDate: string) => {
    const daysUntilDue = getDaysUntilDue(dueDate);
    if (daysUntilDue < 0) {
      return { status: 'overdue', text: `Overdue by ${Math.abs(daysUntilDue)} day${Math.abs(daysUntilDue) !== 1 ? 's' : ''}`, color: 'text-red-600 bg-red-100' };
    } else if (daysUntilDue === 0) {
      return { status: 'due-today', text: 'Due Today!', color: 'text-red-600 bg-red-100' };
    } else if (daysUntilDue === 1) {
      return { status: 'due-tomorrow', text: 'Due Tomorrow - Bake Today!', color: 'text-orange-600 bg-orange-100' };
    } else if (daysUntilDue <= 3) {
      return { status: 'urgent', text: `Due in ${daysUntilDue} days`, color: 'text-yellow-600 bg-yellow-100' };
    } else {
      return { status: 'normal', text: `Due in ${daysUntilDue} days`, color: 'text-gray-600 bg-gray-100' };
    }
  };

  // Check for urgent orders and show alert
  useEffect(() => {
    const urgent = orders.filter(order => 
      order.status !== 'Delivered' && 
      (isUrgent(order.dueDate) || isOverdue(order.dueDate))
    );
    
    setUrgentOrders(urgent);
    
    // Show alert if there are urgent orders
    if (urgent.length > 0) {
      setShowUrgentAlert(true);
    }
  }, [orders, isUrgent, isOverdue]);

  const statusColumns = [
    { key: 'Received', title: 'Received', color: 'bg-yellow-50 border-yellow-200', textColor: 'text-yellow-800' },
    { key: 'In Progress', title: 'In Progress', color: 'bg-blue-50 border-blue-200', textColor: 'text-blue-800' },
    { key: 'Ready', title: 'Ready', color: 'bg-green-50 border-green-200', textColor: 'text-green-800' },
    { key: 'Dispatched', title: 'Dispatched', color: 'bg-purple-50 border-purple-200', textColor: 'text-purple-800' },
    { key: 'Delivered', title: 'Delivered', color: 'bg-gray-50 border-gray-200', textColor: 'text-gray-800' }
  ];

  const handleOrderClick = (order: Order) => {
    if (order.specialInstructions || order.images.length > 0) {
      setSelectedOrder(order);
      setShowDialog(true);
    }
  };

  const closeDialog = () => {
    setShowDialog(false);
    setSelectedOrder(null);
  };

  const openAddOrderDialog = () => {
    setShowAddOrderDialog(true);
  };

  const closeAddOrderDialog = () => {
    setShowAddOrderDialog(false);
    setNewOrder({
      dueDate: '',
      cake: '',
      cream: '',
      topping: '',
      allergies: 'None',
      specialInstructions: '',
      status: 'Received'
    });
  };

  const handleAddOrder = () => {
    // Here you would typically save the order to your backend
    const newOrderData = { id: autoGeneratedOrderId, ...newOrder, images: [] };
    // console.log('Adding new order:', newOrderData);
    
    // Add the new order to the orders array
    setOrders(prev => [...prev, newOrderData]);
    
    closeAddOrderDialog();
  };

  const handleInputChange = (field: string, value: string) => {
    setNewOrder(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const moveOrder = (orderId: string, newStatus: string) => {
    setOrders(prev => 
      prev.map(order => 
        order.id === orderId 
          ? { ...order, status: newStatus }
          : order
      )
    );
  };

  const getOrdersByStatus = (status: string) => {
    return orders.filter(order => order.status === status);
  };

  const getNextStatus = (currentStatus: string) => {
    const statusIndex = statusColumns.findIndex(col => col.key === currentStatus);
    if (statusIndex < statusColumns.length - 1) {
      return statusColumns[statusIndex + 1].key;
    }
    return currentStatus;
  };

  const getStatusColor = (status: string) => {
    const statusMap: { [key: string]: string } = {
      'Received': 'bg-yellow-100 text-yellow-800',
      'In Progress': 'bg-blue-100 text-blue-800',
      'Ready': 'bg-green-100 text-green-800',
      'Dispatched': 'bg-purple-100 text-purple-800',
      'Delivered': 'bg-gray-100 text-gray-800'
    };
    return statusMap[status] || 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="py-8">
      {/* Urgent Orders Alert Banner */}
      {showUrgentAlert && urgentOrders.length > 0 && (
        <div className="mb-6 bg-red-50 border-l-4 border-red-400 p-4 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <AlertTriangle className="h-5 w-5 text-red-400 mr-3" />
              <div>
                <h3 className="text-sm font-medium text-red-800">
                  🚨 URGENT: {urgentOrders.length} order{urgentOrders.length !== 1 ? 's' : ''} need{urgentOrders.length === 1 ? 's' : ''} immediate attention!
                </h3>
                <p className="text-sm text-red-700 mt-1">
                  {urgentOrders.filter(order => isOverdue(order.dueDate)).length > 0 && 
                    `${urgentOrders.filter(order => isOverdue(order.dueDate)).length} overdue, `}
                  {urgentOrders.filter(order => getDaysUntilDue(order.dueDate) === 0).length > 0 && 
                    `${urgentOrders.filter(order => getDaysUntilDue(order.dueDate) === 0).length} due today, `}
                  {urgentOrders.filter(order => getDaysUntilDue(order.dueDate) === 1).length > 0 && 
                    `${urgentOrders.filter(order => getDaysUntilDue(order.dueDate) === 1).length} due tomorrow - BAKE TODAY!`}
                </p>
              </div>
            </div>
            <button
              onClick={() => setShowUrgentAlert(false)}
              className="text-red-400 hover:text-red-600"
            >
              <X size={20} />
            </button>
          </div>
        </div>
      )}

      <div className="flex justify-between items-center mb-8">
        <div>
      <h2 className="text-2xl font-bold mb-2">Manage Orders</h2>
          <p className="text-gray-600 text-base">Track and manage orders through the production pipeline.</p>
        </div>
        <div className="flex gap-2">
          <button
            onClick={moveDeliveredToHistory}
            className="bg-gray-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-gray-600 transition-colors text-sm"
          >
            Move Delivered to History
          </button>
          <button
            onClick={openAddOrderDialog}
            className="bg-[#c7b8ea] text-black px-4 py-2 rounded-lg font-semibold hover:bg-[#c7b8ea]/80 transition-colors flex items-center gap-2 text-sm"
          >
            <FileText size={16} />
            Add Order
          </button>
        </div>
      </div>
      
      {/* Kanban Board */}
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {statusColumns.map(column => (
          <div key={column.key} className={`${column.color} border rounded-lg p-4`}>
            <div className="flex items-center justify-between mb-4">
              <h3 className={`font-semibold ${column.textColor}`}>
                {column.title}
              </h3>
              <span className="bg-white px-2 py-1 rounded-full text-xs font-medium">
                {getOrdersByStatus(column.key).length}
              </span>
        </div>
            
            <div className="space-y-3">
              {getOrdersByStatus(column.key).map(order => (
                <div 
                  key={order.id} 
                  className={`bg-white rounded-lg p-3 shadow-sm border cursor-pointer hover:shadow-md transition-shadow ${
                    (order.specialInstructions || order.images.length > 0) ? 'border-blue-300 bg-blue-50' : ''
                  } ${
                    isOverdue(order.dueDate) ? 'border-red-300 bg-red-50' : 
                    isUrgent(order.dueDate) ? 'border-orange-300 bg-orange-50' : ''
                  }`}
                  onClick={() => handleOrderClick(order)}
                >
                  <div className="flex justify-between items-start mb-2">
                    <span className="text-sm font-medium text-gray-900">{order.id}</span>
                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(order.status)}`}>
                      {order.status}
                    </span>
                  </div>
                  
                  <div className="space-y-1 text-xs text-gray-600">
                    <div><strong>Cake:</strong> {order.cake}</div>
                    <div className="flex items-center gap-2">
                      <strong>Due:</strong> 
                      <span className="text-xs">{order.dueDate}</span>
                      {getDateStatus(order.dueDate).status !== 'normal' && (
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDateStatus(order.dueDate).color}`}>
                          {getDateStatus(order.dueDate).status === 'due-tomorrow' && <Clock className="w-3 h-3 inline mr-1" />}
                          {getDateStatus(order.dueDate).status === 'overdue' && <AlertTriangle className="w-3 h-3 inline mr-1" />}
                          {getDateStatus(order.dueDate).text}
                        </span>
                      )}
                    </div>
                    <div><strong>Cream:</strong> {order.cream}</div>
                    {order.topping && <div><strong>Topping:</strong> {order.topping}</div>}
                  </div>

                  {order.allergies !== 'None' && (
                    <div className="mt-2">
                      <span className="bg-red-100 text-red-800 px-2 py-1 rounded text-xs">
                        ⚠️ {order.allergies}
                      </span>
                    </div>
                  )}

                  <div className="mt-3 flex justify-end">
                    {column.key !== 'Delivered' && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          moveOrder(order.id, getNextStatus(column.key));
                        }}
                        className="bg-[#c7b8ea] text-black px-3 py-1 rounded text-xs font-medium hover:bg-[#c7b8ea]/80 transition-colors flex items-center gap-1"
                      >
                        <ArrowRight size={12} />
                        {getNextStatus(column.key)}
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
        </div>
        ))}
      </div>

      {/* Add Order Dialog */}
      {showAddOrderDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-bold">Add New Order</h3>
              <button 
                onClick={closeAddOrderDialog}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="space-y-6">
              {/* Auto-generated Order ID */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <label className="block text-sm font-medium text-gray-700 mb-2">Order ID (Auto-generated)</label>
                <input
                  type="text"
                  value={autoGeneratedOrderId}
                  disabled
                  className="w-full px-3 py-2 border-b border-gray-300 bg-gray-100 text-gray-700 cursor-not-allowed focus:outline-none"
                />
                <p className="text-xs text-gray-500 mt-1">This order ID is automatically generated and cannot be changed.</p>
              </div>

              {/* Order Details Form */}
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Due Date *</label>
                  <input
                    type="date"
                    value={newOrder.dueDate}
                    onChange={(e) => handleInputChange('dueDate', e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Cake Type *</label>
                  <select
                    value={newOrder.cake}
                    onChange={(e) => handleInputChange('cake', e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                    required
                  >
                    <option value="">Select Cake Type</option>
                    <option value="Chocolate Cake">Chocolate Cake</option>
                    <option value="Vanilla Cake">Vanilla Cake</option>
                    <option value="Red Velvet Cake">Red Velvet Cake</option>
                    <option value="Carrot Cake">Carrot Cake</option>
                    <option value="Lemon Cake">Lemon Cake</option>
                    <option value="Black Forest Cake">Black Forest Cake</option>
                    <option value="Strawberry Cake">Strawberry Cake</option>
                    <option value="Coconut Cake">Coconut Cake</option>
                    <option value="Banana Cake">Banana Cake</option>
                    <option value="Mocha Cake">Mocha Cake</option>
                    <option value="Custom Cake">Custom Cake</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Whipping Cream *</label>
                  <select
                    value={newOrder.cream}
                    onChange={(e) => handleInputChange('cream', e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                    required
                  >
                    <option value="">Select Cream Type</option>
                    <option value="Vanilla">Vanilla</option>
                    <option value="Chocolate">Chocolate</option>
                    <option value="Strawberry">Strawberry</option>
                    <option value="Cream Cheese">Cream Cheese</option>
                    <option value="Coffee">Coffee</option>
                    <option value="Buttercream">Buttercream</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Topping</label>
                  <input
                    type="text"
                    value={newOrder.topping}
                    onChange={(e) => handleInputChange('topping', e.target.value)}
                    placeholder="e.g., Chocolate Chips, Fresh Berries"
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Allergies</label>
                  <select
                    value={newOrder.allergies}
                    onChange={(e) => handleInputChange('allergies', e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                  >
                    <option value="None">None</option>
                    <option value="Nuts">Nuts</option>
                    <option value="Dairy">Dairy</option>
                    <option value="Gluten">Gluten</option>
                    <option value="Eggs">Eggs</option>
                    <option value="Soy">Soy</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select
                    value={newOrder.status}
                    onChange={(e) => handleInputChange('status', e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                  >
                    <option value="Received">Received</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Ready">Ready</option>
                    <option value="Dispatched">Dispatched</option>
                    <option value="Delivered">Delivered</option>
                  </select>
                </div>
              </div>

              {/* Special Instructions */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Special Instructions</label>
                <textarea
                  value={newOrder.specialInstructions}
                  onChange={(e) => handleInputChange('specialInstructions', e.target.value)}
                  placeholder="Any special instructions or requirements for this order..."
                  rows={4}
                  className="w-full px-3 py-2 border-b border-gray-300 focus:outline-none focus:border-[#c7b8ea]"
                />
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end space-x-3 pt-4">
                <button
                  onClick={closeAddOrderDialog}
                  className="px-4 py-1.5 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors text-sm"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddOrder}
                  disabled={!newOrder.dueDate || !newOrder.cake || !newOrder.cream}
                  className="px-4 py-1.5 bg-[#c7b8ea] text-black rounded-md font-semibold hover:bg-[#c7b8ea]/80 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                >
                  Add Order
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Order Details Dialog */}
      {showDialog && selectedOrder && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold">Order Details - {selectedOrder.id}</h3>
              <button 
                onClick={closeDialog}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-semibold">Due Date:</span> {selectedOrder.dueDate}
                </div>
                <div>
                  <span className="font-semibold">Cake Type:</span> {selectedOrder.cake}
                </div>
                <div>
                  <span className="font-semibold">Whipping Cream:</span> {selectedOrder.cream}
                </div>
                <div>
                  <span className="font-semibold">Topping:</span> {selectedOrder.topping}
                </div>
                <div>
                  <span className="font-semibold">Allergies:</span> {selectedOrder.allergies}
                </div>
                <div>
                  <span className="font-semibold">Status:</span> 
                  <span className={`ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(selectedOrder.status)}`}>{selectedOrder.status}</span>
                </div>
              </div>

              {selectedOrder.specialInstructions && (
                <div>
                  <h4 className="font-semibold text-lg mb-2">Special Instructions:</h4>
                  <p className="text-gray-700 bg-gray-50 p-3 rounded-lg">{selectedOrder.specialInstructions}</p>
                </div>
              )}

              {selectedOrder.images.length > 0 && (
                <div>
                  <h4 className="font-semibold text-lg mb-2">Reference Images:</h4>
                  <div className="grid grid-cols-2 gap-4">
                    {selectedOrder.images.map((image: string, index: number) => (
                      <div key={index} className="relative">
                        {/* eslint-disable-next-line @next/next/no-img-element */}
                        <img 
                          src={image} 
                          alt={`Reference ${index + 1}`}
                          className="w-full h-32 object-cover rounded-lg"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 