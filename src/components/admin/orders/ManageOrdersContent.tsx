"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { FileText } from 'lucide-react';
import { AdminOrder } from '@/types/admin';
import { OrderStatus } from '@/types/orders/order';
import OrderDetailsModal from './OrderDetailsModal';
import UrgentOrdersAlert from './UrgentOrdersAlert';
import KanbanBoard from './KanbanBoard';
import AddOrderDialog from './AddOrderDialog';
import { useOrderStatus } from '@/hooks/admin/orders/useOrderStatus';
import { useUrgentOrders } from '@/hooks/admin/orders/useUrgentOrders';

interface ManageOrdersContentProps {
  orders: AdminOrder[];
  moveDeliveredToHistory: () => void;
  updateOrderStatus: (id: string, status: OrderStatus) => Promise<void>;
  refreshOrders: () => Promise<void>;
  isUpdating: boolean;
}

export default function ManageOrdersContent({ 
  orders, 
  moveDeliveredToHistory, 
  updateOrderStatus, 
  refreshOrders,
  isUpdating 
}: ManageOrdersContentProps) {
  const [selectedOrder, setSelectedOrder] = useState<AdminOrder | null>(null);
  const [showDialog, setShowDialog] = useState(false);
  const [showAddOrderDialog, setShowAddOrderDialog] = useState(false);
  const [isHydrated, setIsHydrated] = useState(false);

  // Auto-generate order ID
  const generateOrderId = useCallback(() => {
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000);
    return `#${timestamp}${random}`;
  }, []);

  const [autoGeneratedOrderId] = useState(generateOrderId());

  // Use custom hooks
  const {
    moveOrder,
    getEffectiveStatus,
    clearOptimisticUpdates,
    isOrderUpdating,
  } = useOrderStatus({ updateOrderStatus, isUpdating });

  const {
    urgentOrders,
    showUrgentAlert,
    dismissAlert,
  } = useUrgentOrders(orders);

  // Handle hydration
  useEffect(() => {
    setIsHydrated(true);
  }, []);

  // Clear optimistic updates when orders change (after successful refresh)
  useEffect(() => {
    clearOptimisticUpdates();
  }, [orders, clearOptimisticUpdates]);

  // Handlers
  const handleOrderClick = useCallback((order: AdminOrder) => {
    setSelectedOrder(order);
    setShowDialog(true);
  }, []);

  const closeDialog = useCallback(() => {
    setShowDialog(false);
    setSelectedOrder(null);
  }, []);

  const openAddOrderDialog = useCallback(() => {
    setShowAddOrderDialog(true);
  }, []);

  const closeAddOrderDialog = useCallback(() => {
    setShowAddOrderDialog(false);
  }, []);

  const handleAddOrder = useCallback((orderData: {
    dueDate: string;
    cake: string;
    cream: string;
    topping: string;
    allergies: string;
    specialInstructions: string;
    status: OrderStatus;
  }) => {
    // Here you would typically save the order to your backend
    const _newOrderData: AdminOrder = {
      id: autoGeneratedOrderId,
      orderNumber: autoGeneratedOrderId,
      customerName: 'New Customer', // Placeholder
      customerEmail: 'new@example.com', // Placeholder
      customerPhone: '0700000000', // Placeholder
      size: 'Standard', // Placeholder
      deliveryDate: '', // Placeholder
      totalAmount: 0, // Placeholder
      paymentStatus: 'pending', // Placeholder
      paymentMethod: 'mpesa', // Placeholder
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      ...orderData,
      images: []
    };
    
    // Refresh orders to get the latest data
    refreshOrders();
    
    closeAddOrderDialog();
  }, [autoGeneratedOrderId, refreshOrders, closeAddOrderDialog]);

  const getOrdersByStatus = useCallback((status: string) => {
    return orders.filter(order => {
      const effectiveStatus = getEffectiveStatus(order.id, order.status);
      return effectiveStatus === status;
    });
  }, [orders, getEffectiveStatus]);

  if (!isHydrated) {
    return (
      <div className="text-center py-12">
        <div className="text-gray-500 text-lg mb-4">Loading orders...</div>
      </div>
    );
  }

  return (
    <div className="py-8">
      {/* Urgent Orders Alert Banner */}
      {showUrgentAlert && urgentOrders.length > 0 && (
        <UrgentOrdersAlert
          urgentOrders={urgentOrders}
          onDismiss={dismissAlert}
        />
      )}

      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-2xl font-bold mb-2">Manage Orders</h2>
          <p className="text-gray-600 text-base">Track and manage orders through the production pipeline.</p>
        </div>
        <div className="flex gap-2">
          <button
            onClick={moveDeliveredToHistory}
            className="bg-gray-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-gray-600 transition-colors text-sm"
          >
            Move Delivered to History
          </button>
          <button
            onClick={openAddOrderDialog}
            className="bg-[#c7b8ea] text-black px-4 py-2 rounded-lg font-semibold hover:bg-[#c7b8ea]/80 transition-colors flex items-center gap-2 text-sm"
          >
            <FileText size={16} />
            Add Order
          </button>
        </div>
      </div>
      
      {/* Kanban Board */}
      <KanbanBoard
        orders={orders}
        isHydrated={isHydrated}
        getOrdersByStatus={getOrdersByStatus}
        getEffectiveStatus={getEffectiveStatus}
        isOrderUpdating={isOrderUpdating}
        onOrderClick={handleOrderClick}
        onStatusChange={moveOrder}
      />

      {/* Add Order Dialog */}
      <AddOrderDialog
        isOpen={showAddOrderDialog}
        orderId={autoGeneratedOrderId}
        onClose={closeAddOrderDialog}
        onSubmit={handleAddOrder}
      />

      {/* Order Details Modal */}
      <OrderDetailsModal
        isOpen={showDialog}
        onClose={closeDialog}
        order={selectedOrder}
      />
    </div>
  );
}
